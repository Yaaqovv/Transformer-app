{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Jakov\\\\Transformer-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Jakov\\\\Transformer-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Jakov\\\\Transformer-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Jakov\\\\Transformer-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Jakov\\\\Transformer-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\Jakov\\\\Transformer-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\Jakov\\\\Transformer-app\\\\src\\\\components\\\\transformers.js\";\nimport React, { Component } from 'react';\nimport Add from './add';\nimport Delete from './delete';\n\nvar Transformers =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Transformers, _Component);\n\n  function Transformers(props) {\n    var _this;\n\n    _classCallCheck(this, Transformers);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Transformers).call(this, props));\n    _this.state = {\n      items: [],\n      isLoaded: false,\n      addFormVisibility: false\n    };\n    _this.toggleAddForm = _this.toggleAddForm.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.reloadComponent = _this.reloadComponent.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Transformers, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var myHeaders = new Headers({\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      });\n      fetch('http://localhost:3000/transformers', {\n        headers: myHeaders\n      }).then(function (response) {\n        return response.json();\n      }).then(function (json) {\n        _this2.setState({\n          items: json,\n          isLoaded: true\n        });\n\n        console.log(_this2.state.items);\n      });\n    }\n  }, {\n    key: \"toggleAddForm\",\n    value: function toggleAddForm() {\n      if (!this.state.addFormVisibility) {\n        this.setState({\n          addFormVisibility: true\n        });\n      } else {\n        this.setState({\n          addFormVisibility: false\n        });\n      }\n    }\n  }, {\n    key: \"reloadComponent\",\n    value: function reloadComponent(event) {\n      this.setState({\n        items: this.state.items\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \"Transformer app\"), this.state.items.map(function (transformer, index) {\n        return React.createElement(\"div\", {\n          key: transformer.id,\n          className: \"transformer\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, transformer.name), React.createElement(Delete, {\n          buttonClick: _this3.reloadComponent.bind(_this3),\n          id: transformer.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }));\n      }), React.createElement(\"button\", {\n        onClick: this.toggleAddForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \" + \"), React.createElement(Add, {\n        show: this.state.addFormVisibility,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Transformers;\n}(Component);\n\nexport { Transformers as default };","map":{"version":3,"sources":["C:\\Users\\Jakov\\Transformer-app\\src\\components\\transformers.js"],"names":["React","Component","Add","Delete","Transformers","props","state","items","isLoaded","addFormVisibility","toggleAddForm","bind","reloadComponent","myHeaders","Headers","fetch","headers","then","response","json","setState","console","log","event","map","transformer","index","id","name"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;IAEqBC,Y;;;;;AAEnB,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,sFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,EADI;AAEXC,MAAAA,QAAQ,EAAE,KAFC;AAGXC,MAAAA,iBAAiB,EAAE;AAHR,KAAb;AAKA,UAAKC,aAAL,GAAqB,MAAKA,aAAL,CAAmBC,IAAnB,uDAArB;AACA,UAAKC,eAAL,GAAuB,MAAKA,eAAL,CAAqBD,IAArB,uDAAvB;AARiB;AASlB;;;;wCACmB;AAAA;;AAClB,UAAME,SAAS,GAAG,IAAIC,OAAJ,CAAY;AAC5B,wBAAgB,kBADY;AAE5B,kBAAU;AAFkB,OAAZ,CAAlB;AAIEC,MAAAA,KAAK,CAAC,oCAAD,EAAuC;AAC1CC,QAAAA,OAAO,EAAEH;AADiC,OAAvC,CAAL,CAGCI,IAHD,CAGM,UAAAC,QAAQ;AAAA,eAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,OAHd,EAICF,IAJD,CAIM,UAAAE,IAAI,EAAI;AACZ,QAAA,MAAI,CAACC,QAAL,CAAc;AACZb,UAAAA,KAAK,EAAEY,IADK;AAEZX,UAAAA,QAAQ,EAAE;AAFE,SAAd;;AAIAa,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAI,CAAChB,KAAL,CAAWC,KAAvB;AACD,OAVD;AAWH;;;oCAEgB;AACf,UAAI,CAAC,KAAKD,KAAL,CAAWG,iBAAhB,EAAmC;AACjC,aAAKW,QAAL,CAAc;AACZX,UAAAA,iBAAiB,EAAE;AADP,SAAd;AAGD,OAJD,MAIO;AACL,aAAKW,QAAL,CAAc;AACZX,UAAAA,iBAAiB,EAAE;AADP,SAAd;AAGD;AACF;;;oCAEgBc,K,EAAO;AACtB,WAAKH,QAAL,CAAc;AACZb,QAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC;AADN,OAAd;AAGD;;;6BAEQ;AAAA;;AAEP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,EAEI,KAAKD,KAAL,CAAWC,KAAX,CAAiBiB,GAAjB,CAAqB,UAACC,WAAD,EAAcC,KAAd;AAAA,eACrB;AAAK,UAAA,GAAG,EAAGD,WAAW,CAACE,EAAvB;AAA4B,UAAA,SAAS,EAAC,aAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAMF,WAAW,CAACG,IAAlB,CADF,EAEE,oBAAC,MAAD;AAAQ,UAAA,WAAW,EAAE,MAAI,CAAChB,eAAL,CAAqBD,IAArB,CAA0B,MAA1B,CAArB;AAAsD,UAAA,EAAE,EAAGc,WAAW,CAACE,EAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF,CADqB;AAAA,OAArB,CAFJ,EAOE;AAAQ,QAAA,OAAO,EAAE,KAAKjB,aAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAPF,EAQE,oBAAC,GAAD;AAAK,QAAA,IAAI,EAAE,KAAKJ,KAAL,CAAWG,iBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARF,CADF;AAYD;;;;EA9DuCR,S;;SAArBG,Y","sourcesContent":["import React, { Component } from 'react'\r\nimport Add from './add';\r\nimport Delete from './delete';\r\n\r\nexport default class Transformers extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: [],\r\n      isLoaded: false,\r\n      addFormVisibility: false\r\n    }\r\n    this.toggleAddForm = this.toggleAddForm.bind(this);\r\n    this.reloadComponent = this.reloadComponent.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    const myHeaders = new Headers({\r\n      \"Content-Type\": \"application/json\",\r\n      \"Accept\": \"application/json\"\r\n    });\r\n      fetch('http://localhost:3000/transformers', {\r\n        headers: myHeaders,\r\n      })\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        this.setState({\r\n          items: json,\r\n          isLoaded: true\r\n        })\r\n        console.log(this.state.items);\r\n      });\r\n  }\r\n\r\n  toggleAddForm () {\r\n    if (!this.state.addFormVisibility) {\r\n      this.setState({\r\n        addFormVisibility: true\r\n      });\r\n    } else {\r\n      this.setState({\r\n        addFormVisibility: false\r\n      });\r\n    }\r\n  }\r\n\r\n  reloadComponent (event) {\r\n    this.setState({\r\n      items: this.state.items\r\n    });\r\n  }\r\n\r\n  render() {\r\n    \r\n    return (\r\n      <div>\r\n        <h1>Transformer app</h1>\r\n        { this.state.items.map((transformer, index) => (\r\n          <div key={ transformer.id } className=\"transformer\">\r\n            <h3>{ transformer.name }</h3>\r\n            <Delete buttonClick={this.reloadComponent.bind(this)} id={ transformer.id } />\r\n          </div> ))}\r\n        <button onClick={this.toggleAddForm}> + </button>\r\n        <Add show={this.state.addFormVisibility} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}